<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllStreamsMustBeWritable" xml:space="preserve">
    <value>Tous les flux doivent être accessibles en écriture.</value>
  </data>
  <data name="ArrayCapacityInsufficient" xml:space="preserve">
    <value>Le tableau de destination n'est pas assez long. Vérifiez destIndex et la longueur, ainsi que les limites inférieures du tableau.</value>
  </data>
  <data name="AttributeUndefinedExceptionMessage" xml:space="preserve">
    <value>Aucune propriété de l'objet {0} ne comporte d'attribut {1}</value>
    <comment>Exception levée par la couche Fluent si aucune des propriétés de l'objet passé en paramètre n'est chapeauté par l'attribut recherché.</comment>
  </data>
  <data name="BadInputStringFormat" xml:space="preserve">
    <value>Le format de la chaîne d'entrée est incorrect.</value>
  </data>
  <data name="CollectionFixedSize" xml:space="preserve">
    <value>La collection était de taille fixe</value>
  </data>
  <data name="CollectionIsReadOnly" xml:space="preserve">
    <value>La collection est en lecture seule.</value>
  </data>
  <data name="DictionaryIsReadOnly" xml:space="preserve">
    <value>Le dictionnaire est en lecture seule.</value>
  </data>
  <data name="ExpressionMustBeMethodCall" xml:space="preserve">
    <value>L'expression doit être un appel de méthode.</value>
  </data>
  <data name="ExpressionMustBePropertyAccess" xml:space="preserve">
    <value>L'expression doit être l'accès à une propriété.</value>
  </data>
  <data name="IniFileNameNotSet" xml:space="preserve">
    <value>Le nom du fichier n'est pas défini.</value>
  </data>
  <data name="InputSequenceHasMoreThanOneElement" xml:space="preserve">
    <value>La séquence d'entrée contient plusieurs éléments.</value>
  </data>
  <data name="InvalidCastFromNullToValueType" xml:space="preserve">
    <value>Impossible de convertir un objet null en un type valeur.</value>
  </data>
  <data name="InvalidCastFromTo" xml:space="preserve">
    <value>Cast invalide de '{0}' en '{1}'.</value>
  </data>
  <data name="InvalidNir" xml:space="preserve">
    <value>Le NIR contient des caractères invalides. Il doit être composé de 13 chiffres à l'exception du département qui peut être 2A ou 2B.</value>
  </data>
  <data name="InvalidRIBCharacter" xml:space="preserve">
    <value>Le caractère à convertir doit être une lettre entre A et Z.</value>
  </data>
  <data name="KnownCurrencies_NoProviderAvailable" xml:space="preserve">
    <value>Aucun fournisseur de devises disponible pour la culture '{0}'.</value>
  </data>
  <data name="MajorMinorPatchIdentifiersAreMandatory" xml:space="preserve">
    <value>Les identifiants majeur, mineur et patch sont obligatoires.</value>
  </data>
  <data name="MaxLengthCantBeLessThan" xml:space="preserve">
    <value>maxLength ne peut pas être inférieur à {0}.</value>
  </data>
  <data name="MaxLengthCantBeLessThanLengthOfEllipsisString" xml:space="preserve">
    <value>maxLength ne peut pas être inférieur à la longueur de ellipsisString.</value>
  </data>
  <data name="MaxThreadCountOutOfRange" xml:space="preserve">
    <value>Le nombre maximum de thread doit être supérieur ou égal à 1.</value>
  </data>
  <data name="MoreThanOneIdAttributeExceptionMessage" xml:space="preserve">
    <value>L'attribut Id est défini plusieurs fois pour l'objet {0}.</value>
    <comment>Exception levée par la couche Fluent si l'objet comporte plusieurs fois l'attribut IdAttribute</comment>
  </data>
  <data name="NegativeLifeTime" xml:space="preserve">
    <value>La durée de vie doit être strictement positive.</value>
  </data>
  <data name="NoMatchFound" xml:space="preserve">
    <value>Aucun cas correspondant n'a été trouvé</value>
  </data>
  <data name="NoMatchingItemInList" xml:space="preserve">
    <value>La liste ne contient aucun élément correspondant.</value>
  </data>
  <data name="NumberConverter_NoSpellerAvailable" xml:space="preserve">
    <value>Aucun convertisseur disponible pour la culture '{0}'.</value>
  </data>
  <data name="NumberMustBePositiveOrZero" xml:space="preserve">
    <value>{0} doit être supérieur ou égal à zéro</value>
  </data>
  <data name="NumberMustBeStrictlyPositive" xml:space="preserve">
    <value>{0} doit être strictement supérieur à zéro.</value>
  </data>
  <data name="OnlyNumericTypesAreSupported" xml:space="preserve">
    <value>Seuls les types numériques sont supportés</value>
  </data>
  <data name="OperationTimedOut" xml:space="preserve">
    <value>Le temps imparti à l'opération est écoulé.</value>
  </data>
  <data name="PreReleasePartMustBeBeforeBuildPart" xml:space="preserve">
    <value>La partie pre-release doit être avant la partie build.</value>
  </data>
  <data name="RomanMaxValue" xml:space="preserve">
    <value>Un nombre en chiffres romains ne peut pas être supérieur à {0}.</value>
  </data>
  <data name="RomanMinValue" xml:space="preserve">
    <value>Un nombre en chiffres romains ne peut pas être inférieur à {0}.</value>
  </data>
  <data name="SequenceContainsNoElements" xml:space="preserve">
    <value>La séquence ne contient aucun élément.</value>
  </data>
  <data name="StringNotANumber" xml:space="preserve">
    <value>La chaîne de caractères doit représenter un nombre.</value>
  </data>
  <data name="StringNullOrEmpty" xml:space="preserve">
    <value>La chaîne de caractères ne doit pas être vide.</value>
  </data>
  <data name="StringWrongLength" xml:space="preserve">
    <value>La chaîne doit faire {0} caractères de long.</value>
  </data>
  <data name="SubstringCountOutOfRange" xml:space="preserve">
    <value>Le nombre de caractères doit être supérieur ou égal à zéro et inférieur ou égal à la longueur de la chaine</value>
  </data>
  <data name="TemplateKeyNotFound" xml:space="preserve">
    <value>Aucune valeur trouvée pour la clé '{0}'.</value>
  </data>
  <data name="TimeoutOutOfRange" xml:space="preserve">
    <value>Le timeout doit être supérieur ou égal à 1 milliseconde.</value>
  </data>
  <data name="TypeDoesntImplementEvent" xml:space="preserve">
    <value>Le type '{0}' n'implémente pas l'évènement '{1}'.</value>
  </data>
  <data name="TypeIsNotEnum" xml:space="preserve">
    <value>Le type '{0}' n'est pas une énumération.</value>
  </data>
  <data name="TypeNotDecoratedWithFlags" xml:space="preserve">
    <value>Le type '{0}' n'a pas l'attribut System.FlagsAttribute.</value>
  </data>
  <data name="UnknownConversionType" xml:space="preserve">
    <value>Type de conversion inconnu.</value>
  </data>
  <data name="WrapperClosed" xml:space="preserve">
    <value>Le wrapper a été fermé.</value>
  </data>
  <data name="ZeroHasNoOrdinal" xml:space="preserve">
    <value>Zéro n'a pas d'adjectif numéral ordinal.</value>
  </data>
</root>